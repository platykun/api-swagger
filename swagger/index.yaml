swagger: '2.0'
info:
  version: '1.0.0'
  title: MARUCH スマホ向けAPI
  description: MARUCH スマホ向けのAPIを提供する


securityDefinitions:
  application:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://example.com/oauth/token
    flow: application
    scopes:
      write: allows modifying resources
      read: allows reading resources

security:
  - application:
      - read
      - write
paths:
  /users/me:
    get:
      summary: ログインユーザのユーザ情報を取得する
      description: ログインユーザのユーザ情報を取得する
      parameters:
        - name: user
          in: body
          type: object
          schema:
            properties:
              name:
                description: ユーザ名
                type: string
              sex:
                description: 性別
                type: string
                enum: [man, woman, other]
              birth:
                description: 誕生年月日(yyyy-mm-dd)
                type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
    put:
      summary: ログインユーザのユーザ情報を更新する
      description: ユーザを作成する。作成済みのユーザ情報を返却する
      parameters:
        - name: user
          in: body
          type: object
          schema:
            properties:
              name:
                description: ユーザ名
                type: string
              sex:
                description: 性別
                type: string
                enum: [man, woman, other]
              birth:
                description: 誕生年月日(yyyy-mm-dd)
                type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
  /users/add:
    post:
      summary: ユーザを作成する
      description: ユーザを作成する。作成済みのユーザ情報を返却する
      parameters:
        - name: user
          in: body
          type: object
          schema:
            properties:
              name:
                description: 名前
                type: string
              sex:
                description: 性別
                type: string
                enum: [man, woman, other]
              birth:
                description: 誕生年月日(yyyy-mm-dd)
                type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
  /lunchs/{id}:
    get:
      summary: ランチの詳細情報を取得する
      description: ランチの詳細情報を取得する
      parameters:
        - name: id
          in: path
          description: ランチID
          type: integer
          required: true
          format: int64
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              lunch:
                $ref: '#/definitions/Lunch'
              shop:
                $ref: '#/definitions/Shop'
  /lunchs/list:
    post:
      summary: ランチの一覧を取得する
      description: リクエストパラメータが複雑になることが見込まれるためGETではなくPOSTとして定義。
      parameters:
        - name: parameter
          in: body
          type: object
          schema:
            properties:
              page:
                $ref: '#/definitions/SearchProperties'
              sort:
                description: レスポンスの表示順を指定。
                type: array
                items:
                  type: string
                  enum: [value, lipid, random]
              filter:
                description: 検索条件を指定
                type: object
                properties:
                  value:
                    description: 値段の範囲
                    $ref: '#/definitions/IntegerRange'
                  lipid:
                    description: 脂質の範囲
                    $ref: '#/definitions/IntegerRange'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Lunch'
  /lunchs/add:
    post:
      summary: ランチを追加する
      description: ランチを追加する
      parameters:
        - name: lunch
          $ref: '#/definitions/Lunch'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Lunch'
  /favorites:
    get:
      summary: ログインユーザのお気に入りランチ一覧を取得する
      parameters:
        - name: count
          description: 返却するデータのサイズ。
          in: query
          type: number
          default: 20
          minimum: 1
          maximum: 100
        - name: cursor
          description: 取得するデータのページ数。
          in: query
          type: number
          default: 1
          minimum: 1
          maximum: 100
      responses:
        200:
          description: お気に入りランチ一覧
          schema:
            type: array
            items:
              description: お気に入り情報
              $ref: '#/definitions/Favorite'

  /example:
    # In this operation we do not apply the security, because it was applied globally above.
    # The security will be applied to this operation for that reason.
    get:
      summary: Server example operation
      description: This is an example operation to show how security is applied to the call.
      responses:
        200:
          description: OK
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      # We want to require no security schemes and override the globally define security scheme.
      # To do that, we simply provide an empty array to the 'security' property.
      security: [ ]
      responses:
        200:
          description: OK
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /platykun/maruch_front_api/1.0.0
schemes:
  - https


definitions:
  SearchProperties:
    type: object
    properties:
      count:
        type: number
        default: 20
        minimum: 1
        maximum: 100
        description: 返却するデータのサイズ。
      cursor:
        type: number
        default: 1
        minimum: 1
        maximum: 100
        description: 取得するデータのページ数。
  Lunch:
    type: "object"
    properties:
      id:
        description: ID
        type: string
        example: 001
      imageUrl:
        description: ランチ画像のURL
        type: string
        example: google.com
      creator:
        description: 作成者
        $ref: '#/definitions/User'
      shop:
        description: 店舗情報
        $ref: '#/definitions/Shop'
      value:
        description: 値段
        type: integer
        example: 1200
      detail:
        description: ランチの詳細情報。画像解析の結果が格納されている
        type: object
        properties:
          calorie:
            description: カロリー
            type: number
            example: 162
          carbohydrate:
            description: 炭水化物
            type: integer
            excample: 21.9
          description:
            description: ランチの詳細情報
            type: integer
            example: 1枚分 メープルシロップバター付
          fiber:
            description: 食物繊維
            type: number
            example: 0.4
          label:
            description: ラベル
            type: string
            example: パンケーキ
          lipid:
            description: 脂質
            type: number
            example: 6.5
          protein:
            description: タンパク質
            type: number
            example: 3.1
          salt:
            description: 塩分
            type: number
            example: 0.2
  User:
    description: ユーザ情報
    properties:
      id:
        description: ユーザID
        type: string
        example: 001
      name:
        description: ユーザ名
        type: string
        example: alice
      sex:
        description: 性別
        type: string
        enum: [man, woman, other]
        example: woman
      birth:
        description: 誕生年月日(yyyy-mm-dd)
        type: string
        example: 1992-12-11
  Shop:
    description: 店舗情報の概要
    properties:
      id:
        description: 店舗ID
        type: string
        example: 001
      name:
        description: 店舗名
        type: string
        example: 完全個室居酒屋 初代鳥万作 東京八重洲店
      name_kana:
        description: 店舗名読み
        type: string
        example: カンゼンコシツイザカヤショダイトリマンサク トウキョウヤエステン
      tel:
        description: 電話番号
        type: string
        example: 050-1234-5678
      address:
        description: 住所
        type: string
        example: 〒103-0028 東京都中央区八重洲1-7-10 1F
      opentime:
        description: 営業時間
        type: string
        example: 月～金 昼食　11:30～14:00（L.O.13:30、ドリンクL.O.13:30）毎日ランチタイムを行っております。・・・
      holiday:
        description: 休業日
        type: string
        example: 年中無休 定休日はございません。平日や休日なども休まず営業いたします。金曜や祝前日は朝5時まで営業いたします！
      url:
        $ref: '#/definitions/GurunabiUrl'
  GurunabiUrl:
    description: ぐるなびサイトのURL
    properties:
      pc_url:
        description: PCサイトURL
        type: string
        example: https://r.gnavi.co.jp/dnj1y43c0000/
      mobile_url:
        description: スマホサイトURL
        type: string
        example: https://r.gnavi.co.jp/dnj1y43c0000/
  IntegerRange:
    description: 値の範囲を指定
    properties:
      min:
        description: 最小値
        type: integer
        example: 1
      max:
        description: 最大値
        type: integer
        example: 1000
  Favorite:
    description: お気に入りランチ情報
    type: "object"
    properties:
      imageUrl:
        description: ランチ画像のURL
        type: string
        example: google.com
      date:
        description: お気に入り日時(JST)
        type: string
        example: 2019-11-17 12:00:00
